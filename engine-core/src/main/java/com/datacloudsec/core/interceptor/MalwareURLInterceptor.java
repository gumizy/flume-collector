package com.datacloudsec.core.interceptor;

import com.datacloudsec.config.Context;
import com.datacloudsec.config.Event;
import com.datacloudsec.config.conf.BasicConfigurationConstants;
import com.datacloudsec.core.conf.MalwareURL;
import com.datacloudsec.core.conf.MalwareURLSearch;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * MalwareURLInterceptor
 */
public class MalwareURLInterceptor extends AbstractInterceptor implements Interceptor {

    private static final Logger logger = LoggerFactory.getLogger(MalwareIpInterceptor.class);

    private MalwareURLInterceptor(Context context) {
        String enrichFields = context.getString(BasicConfigurationConstants.MALWAREURL_ENRICH_FIELDS);
        if (enrichFields != null && enrichFields.trim().length() > 0) {
            this.enrichFields = enrichFields.split(",");
        }

        String enrichConfigField = context.getString(BasicConfigurationConstants.MALWAREURL_REFLECT_ENRICH_FIELDS);
        if (enrichConfigField != null && enrichConfigField.trim().length() > 0) {
            this.enrichConfigField = enrichConfigField;
        }

        if (this.enrichFields == null || this.enrichFields.length == 0 || this.enrichConfigField.isEmpty() || this.enrichConfigField.trim().length() == 0) {
            logger.error("Enrich fields of malware url init failed, context :{}" + context);
        }
    }

    @Override
    public void initialize() {

    }

    private String urlTrim(String url) {
        if (url == null || StringUtils.isEmpty(url)) {
            return url;
        }

        int start = 0;
        int end = url.length() - 1;

        if (url.contains("www.")) {
            start = url.indexOf("www.");
        } else if (url.contains("https://")) {
            start = url.indexOf("https://");
            start += "https://".length();
        } else if (url.contains("http://")) {
            start = url.indexOf("http://");
            start += "http://".length();
        }

        if (url.indexOf("?", start) >= 0) {
            end = url.indexOf("?", start);
        }

        url = url.substring(start, end);

        return url;
    }

    @Override
    public Event intercept(Event event) {
        Object object = null;
        try {
            object = event.getValue().get(this.enrichConfigField);
            MalwareURL malwareURL = null;

            if (object != null && object.toString().trim().length() > 0) {
                String url = (String) object;
                url = urlTrim(url);

                malwareURL = MalwareURLSearch.getMalwareURLByURL(url);
            }

            if (malwareURL == null) {
                malwareURL = new MalwareURL();
            }

            for (String fieldName : enrichFields) {
                inject(fieldName, malwareURL, event);
            }
        } catch (Exception e) {
            logger.debug("Malware url information parsing failed, exception : {}", object, e);
        } finally {

        }

        return event;
    }


    @Override
    public List<Event> intercept(List<Event> events) {
        for (Event event : events) {
            intercept(event);
        }
        return events;
    }

    @Override
    public void close() {

    }

    public static class Builder implements Interceptor.Builder {
        private Context context;

        @Override
        public Interceptor build() {
            return new MalwareURLInterceptor(context);
        }

        @Override
        public void configure(Context context) {
            this.context = context;
        }
    }

}
