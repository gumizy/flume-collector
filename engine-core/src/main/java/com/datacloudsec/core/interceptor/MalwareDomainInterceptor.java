package com.datacloudsec.core.interceptor;

import com.datacloudsec.config.Context;
import com.datacloudsec.config.Event;
import com.datacloudsec.config.conf.BasicConfigurationConstants;
import com.datacloudsec.core.conf.MalwareDomain;
import com.datacloudsec.core.conf.MalwareDomainSearch;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * MalwareDomainInterceptor
 */
public class MalwareDomainInterceptor extends AbstractInterceptor implements Interceptor {

    private static final Logger logger = LoggerFactory.getLogger(MalwareDomainInterceptor.class);

    private MalwareDomainInterceptor(Context context) {
        String enrichFields = context.getString(BasicConfigurationConstants.MALWAREDOMAIN_ENRICH_FIELDS);
        if (enrichFields != null && enrichFields.trim().length() > 0) {
            this.enrichFields = enrichFields.split(",");
        }

        String enrichConfigField = context.getString(BasicConfigurationConstants.MALWAREDOMAIN_REFLECT_ENRICH_FIELDS);
        if (enrichConfigField != null && enrichConfigField.trim().length() > 0) {
            this.enrichConfigField = enrichConfigField;
        }

        if (this.enrichFields == null || this.enrichFields.length == 0 || this.enrichConfigField.isEmpty() || this.enrichConfigField.trim().length() == 0) {
            logger.error("Enrich fields of malware domain init failed, context :{}" + context);
        }
    }

    @Override
    public void initialize() {

    }

    private String getDomainFromURL(String url) {
        if (url == null || StringUtils.isEmpty(url)) {
            return url;
        }

        String domain = url;
        int start = 0;
        int end = domain.length() - 1;

        if (domain.contains("www.")) {
            start = domain.indexOf("www.");
            start += "www.".length();
        } else if (domain.contains("http://")) {
            start = domain.indexOf("http://");
            start += "http://".length();
        } else if (domain.contains("https://")) {
            start = domain.indexOf("https://");
            start += "https://".length();
        }

        if (domain.indexOf("/", start) >= 0) {
            end = domain.indexOf("/", start);
        }

        domain = domain.substring(start, end);

        return domain;
    }

    @Override
    public Event intercept(Event event) {
        Object object = null;
        try {
            object = event.getValue().get(this.enrichConfigField);
            MalwareDomain malwareDomain = null;

            if (object != null && object.toString().trim().length() > 0) {
                String domain = getDomainFromURL(((String) object).toLowerCase());
                malwareDomain = MalwareDomainSearch.getMalwareDomainByDomain(domain);
            }

            if (malwareDomain == null) {
                malwareDomain = new MalwareDomain();
            }

            for (String fieldName : enrichFields) {
                inject(fieldName, malwareDomain, event);
            }
        } catch (Exception e) {
            logger.debug("Malware domain information parsing failed, exception : {}", object, e);
        } finally {

        }

        return event;
    }


    @Override
    public List<Event> intercept(List<Event> events) {
        for (Event event : events) {
            intercept(event);
        }
        return events;
    }

    @Override
    public void close() {

    }

    public static class Builder implements Interceptor.Builder {
        private Context context;

        @Override
        public Interceptor build() {
            return new MalwareDomainInterceptor(context);
        }

        @Override
        public void configure(Context context) {
            this.context = context;
        }
    }
}
