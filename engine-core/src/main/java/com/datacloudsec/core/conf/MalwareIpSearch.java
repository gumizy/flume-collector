package com.datacloudsec.core.conf;

import com.datacloudsec.config.tools.IPv4Kit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * MalwareIpSearch
 */
public class MalwareIpSearch {

    private static final Logger logger = LoggerFactory.getLogger(MalwareIpSearch.class);

    private static MalwareIP[] allMalwareIps = null;

    private static MalwareIP[] allMalwareDNS = null;

    public synchronized static void initMalwareIps(List<MalwareIP> allMalwareIps) {
        if (allMalwareIps == null) {
            logger.error("Malware ips is null, please check!");
            return;
        }

        int size = allMalwareIps.size();
        MalwareIpSearch.allMalwareIps = (MalwareIP[]) allMalwareIps.toArray(new MalwareIP[size]);
    }

    public synchronized static void initMalwareDNS(List<MalwareIP> allMalwareDNS) {
        if (allMalwareDNS == null) {
            logger.error("Malware dns is null, please check!");
            return;
        }

        int size = allMalwareDNS.size();
        MalwareIpSearch.allMalwareDNS = (MalwareIP[]) allMalwareDNS.toArray(new MalwareIP[size]);
    }

    private static int ipInInterval(long ip, MalwareIP malwareIpLibrary) {
        if (malwareIpLibrary.getStartIp() <= ip && ip <= malwareIpLibrary.getEndIp()) {
            return 1;
        } else if (ip < malwareIpLibrary.getStartIp()) {
            return 0;
        } else {
            return 2;
        }
    }

    public static MalwareIP getMalwareIpByIp(String ip) {
        return findMalwareIpByIp(ip, allMalwareIps);
    }

    public static MalwareIP getMalwareDNSByIp(String ip) {
        return findMalwareIpByIp(ip, allMalwareDNS);
    }

    public static MalwareIP findMalwareIpByIp(String ip, MalwareIP[] allMalwareIps) {
        long searchIp = IPv4Kit.ip2long(ip);
        int i = 0;
        int j = allMalwareIps.length - 1;
        int k = (i + j) / 2;
        int find = -1;

        while (j > k) {
            int tmp = ipInInterval(searchIp, allMalwareIps[i]);

            if (tmp == 1) {
                find = i;
            } else if (tmp < 1) {
                break;
            }

            if (i == j) {
                break;
            }

            tmp = ipInInterval(searchIp, allMalwareIps[j]);
            if (tmp == 1) {
                find = j;
            } else if (tmp > 1) {
                break;
            }

            tmp = ipInInterval(searchIp, allMalwareIps[k]);
            if (tmp == 1) {
                find = k;
            } else {
                i++;
                j--;

                if (j < i) {
                    break;
                }

                k = (i + j) / 2;
            }
        }

        if (find < 0) {
            return null;
        }

        return allMalwareIps[find];
    }
}
