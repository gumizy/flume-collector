package com.datacloudsec.core.conf;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * Created by liqiang on 2017/8/21.
 */
public class VulnerabilityInfoSearch {
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityInfoSearch.class);
    private static List<VulnerabilityInfo> allVulnerabilityInfo = Collections.emptyList();
    private static Map<String, VulnerabilityInfo> VulnerabilityInfoMap = Collections.emptyMap();

    public static void initVulnerabilityInfo(List<VulnerabilityInfo> allVulnerabilityInfo) {
        if (allVulnerabilityInfo == null) {
            logger.error("vulnerability info list is null, please check!");
            allVulnerabilityInfo = Collections.emptyList();
            VulnerabilityInfoMap = Collections.emptyMap();
            return;
        }

        VulnerabilityInfoSearch.allVulnerabilityInfo = allVulnerabilityInfo;
        VulnerabilityInfoSearch.updateInnerMapping();
    }

    private synchronized static void updateInnerMapping() {
        if(CollectionUtils.isEmpty(VulnerabilityInfoSearch.allVulnerabilityInfo)) {
            logger.info("vulnerability info list is empty, will auto clear inner mapping!");
            VulnerabilityInfoMap = Collections.emptyMap();
        } else {
            VulnerabilityInfoMap = allVulnerabilityInfo.stream()
                    .collect(java.util.stream.Collectors.toMap(VulnerabilityInfo::getVulHash, e -> e));
        }
    }

    public static VulnerabilityInfo getVulnerabilityInfoByHash(String vulHash) {
        return  VulnerabilityInfoMap.get(vulHash);
    }
}
